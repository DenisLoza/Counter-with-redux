{"version":3,"sources":["components/DisplaySet.module.css","components/ButtonSet.module.css","components/ButtonSet.tsx","components/DisplaySet.tsx","components/ButtonCounter.tsx","components/DisplayCounter.tsx","App.tsx","store/actions.ts","serviceWorker.ts","store/reducers.ts","store/store.ts","index.tsx","components/DisplayCounter.module.css","components/ButtonCounter.module.css"],"names":["module","exports","ButtonSet","props","className","s","button","onClick","setValue","disabled","errorValue","DisplaySet","startValue","maxValue","changeInput","useState","currentStartValue","setCurrentStartValue","currentMaxValue","setCurrentMaxValue","startValueInputStyle","maxValueInputStyle","backgroundColor","changeErrorValue","DisplaySetView","valueText","value","inputArea","input","type","onChange","target","style","changeStartValue","changeMaxValue","ButtonCounter","styleInc","disabledInc","cursor","styleReset","disabledReset","buttonInc","currentIncValue","buttonReset","resetValue","DisplayCounter","onChangeInputValue","incValue","setIncValue","incErrValue","setIncErrValue","incChangeInpValue","setIncChangeInpValue","useEffect","showErrOrCounter","err","setStyle","marginTop","fontSize","errStyle","color","DisplayInputValue","DisplayNormal","DisplayCounterView","count","App","dispatch","useDispatch","useSelector","state","newStartValue","action","changeStartValueAC","newMaxValue","changeMaxValueAC","newErrorValue","changeErrorValueAC","newOnChangeInputValue","changeInputAC","Boolean","window","location","hostname","match","initialState","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.93d835cf.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"DisplaySet\":\"DisplaySet_DisplaySet__2WMoz\",\"DisplaySetView\":\"DisplaySet_DisplaySetView__1OypM\",\"valueText\":\"DisplaySet_valueText__3-I6y\",\"value\":\"DisplaySet_value__3uuiD\",\"inputArea\":\"DisplaySet_inputArea__3e4K2\",\"input\":\"DisplaySet_input__1f8iB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonSet\":\"ButtonSet_ButtonSet__3Y8J_\",\"button\":\"ButtonSet_button__EQCJy\"};","import React from \"react\";\r\nimport s from \"./ButtonSet.module.css\";\r\n\r\n\r\nexport function ButtonSet(props: any) {\r\n\r\n    return (\r\n        <div className={s.ButtonSet}>\r\n            <button className={s.button}\r\n                    onClick={props.setValue}\r\n                    disabled={props.errorValue}>\r\n                SET\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from \"react\";\r\nimport s from \"./DisplaySet.module.css\";\r\nimport {ButtonSet} from \"./ButtonSet\";\r\n\r\nexport function DisplaySet(props: any) {\r\n\r\n    // используем хук useState для хранения локального стейта DisplaySet\r\n    let startValue = props.startValue\r\n    let maxValue = props.maxValue\r\n    let changeInput = props.changeInput\r\n\r\n    let [currentStartValue, setCurrentStartValue] = useState(startValue)\r\n    let [currentMaxValue, setCurrentMaxValue] = useState(maxValue)\r\n\r\n\r\n        // проверки на ошибочные значения при вводе\r\n    let errorValue\r\n    let startValueInputStyle = {}\r\n    let maxValueInputStyle = {}\r\n    if (currentStartValue < 0) {\r\n        errorValue = true\r\n        startValueInputStyle = {backgroundColor: \"salmon\"}\r\n    } else if (currentMaxValue <= currentStartValue) {\r\n        errorValue = true\r\n        maxValueInputStyle = {backgroundColor: \"salmon\"}\r\n        startValueInputStyle = {backgroundColor: \"salmon\"}\r\n    } else {\r\n        errorValue = false\r\n    }\r\n\r\n\r\n    // отправляем значение ошибки в глобальный стейт\r\n    props.changeErrorValue(errorValue)\r\n\r\n\r\n    const setStartValue = (props: any) => {\r\n        setCurrentStartValue(+props.target.value)\r\n        changeInput(true)\r\n    }\r\n    const setMaxValue = (props: any) => {\r\n        setCurrentMaxValue(+props.target.value)\r\n        changeInput(true)\r\n    }\r\n    const setValue = () => {\r\n        props.changeStartValue(currentStartValue)\r\n        props.changeMaxValue(currentMaxValue)\r\n        changeInput(false)\r\n    }\r\n    // console.log(currentStartValue, currentMaxValue, errorValue)\r\n\r\n    return (\r\n        <div className={s.DisplaySet}>\r\n            <div className={s.DisplaySetView}>\r\n                <div className={s.valueText}>\r\n                    <div className={s.value}>\r\n                        MAX VALUE:\r\n                    </div>\r\n                    <div className={s.value}>\r\n                        START VALUE:\r\n                    </div>\r\n                </div>\r\n\r\n                <div className={s.inputArea}>\r\n                    <input className={s.input}\r\n                           type=\"number\"\r\n                           value={currentMaxValue}\r\n                           onChange={setMaxValue}\r\n                           style={maxValueInputStyle}\r\n                    />\r\n                    <input className={s.input}\r\n                           type=\"number\"\r\n                           value={currentStartValue}\r\n                           onChange={setStartValue}\r\n                           style={startValueInputStyle}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <ButtonSet setValue={setValue}\r\n                       errorValue={errorValue}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React from \"react\";\r\nimport s from \"./ButtonCounter.module.css\";\r\n\r\nexport function ButtonCounter(props: any) {\r\n\r\n    let styleInc = props.disabledInc === true ? {cursor: \"default\"} : {}\r\n    let styleReset = props.disabledReset === true ? {cursor: \"default\"} : {}\r\n\r\n    return (\r\n        <div className={s.ButtonCounter}>\r\n            <button className={s.buttonInc}\r\n                    style={styleInc}\r\n                    onClick={props.currentIncValue}\r\n                    disabled={props.disabledInc}>\r\n                INC\r\n            </button>\r\n            <button className={s.buttonReset}\r\n                    style={styleReset}\r\n                    onClick={props.resetValue}\r\n                    disabled={props.disabledReset}>\r\n                RESET\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useEffect, useState} from \"react\";\r\nimport s from \"./DisplayCounter.module.css\";\r\nimport {ButtonCounter} from \"./ButtonCounter\";\r\n\r\n\r\nexport function DisplayCounter(props: any) {\r\n\r\n    // используем хук useState для хранения локального стейта DisplayCounter\r\n    let startValue = props.startValue\r\n    let maxValue = props.maxValue\r\n    let errorValue = props.errorValue\r\n    let onChangeInputValue = props.onChangeInputValue\r\n\r\n    let [incValue, setIncValue] = useState(startValue);\r\n    let [incErrValue, setIncErrValue] = useState(errorValue);\r\n    let [incChangeInpValue, setIncChangeInpValue] = useState(onChangeInputValue);\r\n\r\n    // рендерит компаненту, как только приходит новое значение startValue или setIncValue\r\n    useEffect(() => {setIncValue(startValue)\r\n    }, [setIncValue, startValue])\r\n    useEffect(() => {setIncErrValue(errorValue)\r\n    }, [setIncErrValue, errorValue])\r\n    useEffect(() => {setIncChangeInpValue(onChangeInputValue)\r\n    }, [setIncChangeInpValue, onChangeInputValue])\r\n\r\n\r\n    // текущее значение счетчика увеличивается на 1 при нажатии на кнопку\r\n    const currentIncValue = () => {\r\n        if (incValue < maxValue) {\r\n            setIncValue(incValue + 1)\r\n        } else {\r\n            return\r\n        }\r\n    }\r\n    // сброс текущего значения счетчика на стартовое значение startValue в глобальном Стэйте\r\n    const resetValue = () => {\r\n        setIncValue(startValue)\r\n    }\r\n    // отключение кнопок INC и RESET при условиях\r\n    let disabledInc: boolean,\r\n        disabledReset: boolean\r\n\r\n    if (incValue === startValue) {\r\n        disabledInc = false;\r\n        disabledReset = true;\r\n    } else if (incValue < maxValue){\r\n        disabledInc = false;\r\n        disabledReset = false;\r\n    } else {\r\n        disabledInc = true;\r\n        disabledReset = false;\r\n    }\r\n\r\n    let showErrOrCounter = incValue < maxValue ? incValue : <div className={s.err}> {incValue} </div>\r\n    let setStyle = {marginTop: \"130px\", fontSize: \"30px\" }\r\n    let errStyle = {color: \"red\", marginTop: \"130px\", fontSize: \"30px\" }\r\n\r\n    // УСЛОВИЕ... КАКОЙ JSX ВЫБРОСИТ Ф-ЦИЯ\r\n    // если из стейта придет значение изменения в инпутах и значение ОШИБКИ на инпутах не будет,\r\n    // тогда отбрази DisplayNormal\r\n    if (incChangeInpValue && !incErrValue) {\r\n        return <DisplayInputValue/>\r\n    } else {\r\n        return <DisplayNormal/>\r\n    }\r\n\r\n\r\n    function DisplayInputValue() {\r\n        return (\r\n            <div className={s.DisplayCounter}>\r\n                <div className={s.DisplayCounterView}>\r\n                        <div style={setStyle}>ENTER VALUES and PUSH \"SET\"</div>\r\n                </div>\r\n                <ButtonCounter currentIncValue={currentIncValue}\r\n                               resetValue={resetValue}\r\n                               disabledReset={disabledReset}\r\n                               disabledInc={disabledInc}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n    function DisplayNormal() {\r\n        return (\r\n            <div className={s.DisplayCounter}>\r\n                <div className={s.DisplayCounterView}>\r\n                    {incErrValue\r\n                        ? <div style={errStyle}>INCORRECT VALUE !</div>\r\n                        : <div className={s.count}>\r\n                            {showErrOrCounter}\r\n                        </div>\r\n                    }\r\n                </div>\r\n                <ButtonCounter currentIncValue={currentIncValue}\r\n                               resetValue={resetValue}\r\n                               disabledReset={disabledReset}\r\n                               disabledInc={disabledInc}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport './App.css';\nimport {DisplaySet} from \"./components/DisplaySet\";\nimport {DisplayCounter} from \"./components/DisplayCounter\";\nimport {useDispatch, useSelector} from \"react-redux\";\nimport {changeErrorValueAC, changeInputAC, changeMaxValueAC, changeStartValueAC} from \"./store/actions\";\nimport {rootStateType} from \"./store/reducers\";\n\n\nfunction App() {\n\n    // с помощью хука useDispatch передаем значения в state (Redux) напрямую\n    const dispatch = useDispatch()\n    const changeStartValue = (newStartValue: string) => {\n        const action = changeStartValueAC(+newStartValue)\n        dispatch(action)\n    }\n    const changeMaxValue = (newMaxValue: string) => {\n        const action = changeMaxValueAC(+newMaxValue)\n        dispatch(action)\n    }\n    const changeErrorValue = (newErrorValue: boolean) => {\n        const action = changeErrorValueAC(newErrorValue)\n        dispatch(action)\n    }\n    const changeInput = (newOnChangeInputValue: boolean) => {\n        const action = changeInputAC(newOnChangeInputValue)\n        dispatch(action)\n    }\n\n    // с помощью хука useSelector достаем значения из state (Redux) напрямую\n    const startValue = useSelector<rootStateType, number>((state) => state.startValue)\n    const maxValue = useSelector<rootStateType, number>((state) => state.maxValue)\n    const errorValue = useSelector<rootStateType, boolean>((state) => state.errorValue)\n    const onChangeInputValue = useSelector<rootStateType, boolean>((state) => state.onChangeInputValue)\n    // const errorValue = useSelector<rootStateType, boolean>((state) => state.errorValue)\n\n  return (\n      <div className=\"App\">\n        <DisplaySet startValue={startValue}\n                    maxValue={maxValue}\n                    changeStartValue={changeStartValue}\n                    changeMaxValue={changeMaxValue}\n                    changeErrorValue={changeErrorValue}\n                    changeInput={changeInput}\n        />\n        <DisplayCounter startValue={startValue}\n                        maxValue={maxValue}\n                        errorValue={errorValue}\n                        onChangeInputValue={onChangeInputValue}\n        />\n      </div>\n  );\n}\n\nexport default App;\n","export const CHANGE_START_VALUE = \"CHANGE_START_VALUE\"\r\nexport const CHANGE_MAX_VALUE = \"CHANGE_MAX_VALUE\"\r\nexport const ERROR_VALUE = \"ERROR_VALUE\"\r\nexport const ON_CHANGE_INPUT = \"ON_CHANGE_INPUT\"\r\n\r\ntype changeStartValueType = {\r\n    type: \"CHANGE_START_VALUE\"\r\n    startValue: number\r\n}\r\ntype changeMaxValueType = {\r\n    type: \"CHANGE_MAX_VALUE\"\r\n    maxValue: number\r\n}\r\ntype changeErrorValueType = {\r\n    type: \"ERROR_VALUE\"\r\n    errorValue: boolean\r\n}\r\ntype changeInputType = {\r\n    type: \"ON_CHANGE_INPUT\"\r\n    onChangeInputValue: boolean\r\n}\r\n// создаем обобщенный тип экшенов\r\nexport type actionsType = changeStartValueType | changeMaxValueType\r\n    | changeErrorValueType | changeInputType\r\n\r\nexport const changeStartValueAC = (newStartValue: number) => {\r\n    return {\r\n        type: CHANGE_START_VALUE,\r\n        startValue: newStartValue\r\n    }\r\n}\r\nexport const changeMaxValueAC = (newMaxValue: number) => {\r\n    return {\r\n        type: CHANGE_MAX_VALUE,\r\n        maxValue: newMaxValue\r\n    }\r\n}\r\nexport const changeErrorValueAC = (newErrorValue: boolean) => {\r\n    return {\r\n        type: ERROR_VALUE,\r\n        errorValue: newErrorValue\r\n    }\r\n}\r\nexport const changeInputAC = (newOnChangeInputValue: boolean) => {\r\n    return {\r\n        type: ON_CHANGE_INPUT,\r\n        onChangeInputValue: newOnChangeInputValue\r\n    }\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {actionsType} from \"./actions\"\r\n\r\ntype stateType = {\r\n    startValue: number\r\n    maxValue: number\r\n    errorValue: boolean\r\n    onChangeInputValue: boolean\r\n}\r\n\r\nconst initialState = {\r\n    startValue: 0,\r\n    maxValue: 5,\r\n    errorValue: false,\r\n    onChangeInputValue: false,\r\n}\r\n//создаем обобщенный тип для State, который будет генерироваться автоматически при дальнейшем редактировании редьюсера\r\nexport type rootStateType = ReturnType<typeof counterReducer>\r\n\r\nexport const counterReducer = (state: stateType = initialState, action: actionsType): stateType => {\r\n    switch (action.type) {\r\n        case \"CHANGE_START_VALUE\":\r\n            return {...state, startValue: action.startValue}\r\n        case \"CHANGE_MAX_VALUE\":\r\n            return {...state, maxValue: action.maxValue}\r\n        case \"ERROR_VALUE\":\r\n            return {...state, errorValue: action.errorValue}\r\n        case \"ON_CHANGE_INPUT\":\r\n            return {...state, onChangeInputValue: action.onChangeInputValue}\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n","import {createStore} from \"redux\"\r\nimport {counterReducer} from \"./reducers\"\r\n\r\n\r\n// создаем стор и передаем туда редьюсер\r\nexport const store = createStore(counterReducer)\r\n\r\n// @ts-ignore\r\nwindow.store = store\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport {store} from \"./store/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n    <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"DisplayCounter\":\"DisplayCounter_DisplayCounter__1i1Hm\",\"DisplayCounterView\":\"DisplayCounter_DisplayCounterView__1nvRy\",\"count\":\"DisplayCounter_count__f5UVo\",\"err\":\"DisplayCounter_err__1r0ph\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonCounter\":\"ButtonCounter_ButtonCounter__1MTpl\",\"buttonInc\":\"ButtonCounter_buttonInc__3KzkD\",\"buttonReset\":\"ButtonCounter_buttonReset__2jU2m\"};"],"sourceRoot":""}